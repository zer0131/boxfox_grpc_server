// Code generated by protoc-gen-go. DO NOT EDIT.
// source: boxfox_grpc_server.proto

package demo

/*
package名称使用group，框架只在group层面避免冲突
同组内部rpc服务的调用
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MonitorReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Age                  int64    `protobuf:"varint,2,opt,name=age,proto3" json:"age"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorReq) Reset()         { *m = MonitorReq{} }
func (m *MonitorReq) String() string { return proto.CompactTextString(m) }
func (*MonitorReq) ProtoMessage()    {}
func (*MonitorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_boxfox_grpc_server_098e782a95eed3f1, []int{0}
}
func (m *MonitorReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorReq.Unmarshal(m, b)
}
func (m *MonitorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorReq.Marshal(b, m, deterministic)
}
func (dst *MonitorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorReq.Merge(dst, src)
}
func (m *MonitorReq) XXX_Size() int {
	return xxx_messageInfo_MonitorReq.Size(m)
}
func (m *MonitorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorReq.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorReq proto.InternalMessageInfo

func (m *MonitorReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MonitorReq) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

type MonitorResp struct {
	Errno                int32    `protobuf:"varint,1,opt,name=errno,proto3" json:"errno"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorResp) Reset()         { *m = MonitorResp{} }
func (m *MonitorResp) String() string { return proto.CompactTextString(m) }
func (*MonitorResp) ProtoMessage()    {}
func (*MonitorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_boxfox_grpc_server_098e782a95eed3f1, []int{1}
}
func (m *MonitorResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorResp.Unmarshal(m, b)
}
func (m *MonitorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorResp.Marshal(b, m, deterministic)
}
func (dst *MonitorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorResp.Merge(dst, src)
}
func (m *MonitorResp) XXX_Size() int {
	return xxx_messageInfo_MonitorResp.Size(m)
}
func (m *MonitorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorResp.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorResp proto.InternalMessageInfo

func (m *MonitorResp) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *MonitorResp) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func init() {
	proto.RegisterType((*MonitorReq)(nil), "demo.MonitorReq")
	proto.RegisterType((*MonitorResp)(nil), "demo.MonitorResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BoxfoxGrpcServerServiceClient is the client API for BoxfoxGrpcServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoxfoxGrpcServerServiceClient interface {
	Monitor(ctx context.Context, in *MonitorReq, opts ...grpc.CallOption) (*MonitorResp, error)
}

type boxfoxGrpcServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewBoxfoxGrpcServerServiceClient(cc *grpc.ClientConn) BoxfoxGrpcServerServiceClient {
	return &boxfoxGrpcServerServiceClient{cc}
}

func (c *boxfoxGrpcServerServiceClient) Monitor(ctx context.Context, in *MonitorReq, opts ...grpc.CallOption) (*MonitorResp, error) {
	out := new(MonitorResp)
	err := c.cc.Invoke(ctx, "/demo.BoxfoxGrpcServerService/Monitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxfoxGrpcServerServiceServer is the server API for BoxfoxGrpcServerService service.
type BoxfoxGrpcServerServiceServer interface {
	Monitor(context.Context, *MonitorReq) (*MonitorResp, error)
}

func RegisterBoxfoxGrpcServerServiceServer(s *grpc.Server, srv BoxfoxGrpcServerServiceServer) {
	s.RegisterService(&_BoxfoxGrpcServerService_serviceDesc, srv)
}

func _BoxfoxGrpcServerService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxfoxGrpcServerServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.BoxfoxGrpcServerService/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxfoxGrpcServerServiceServer).Monitor(ctx, req.(*MonitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BoxfoxGrpcServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.BoxfoxGrpcServerService",
	HandlerType: (*BoxfoxGrpcServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Monitor",
			Handler:    _BoxfoxGrpcServerService_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boxfox_grpc_server.proto",
}

func init() {
	proto.RegisterFile("boxfox_grpc_server.proto", fileDescriptor_boxfox_grpc_server_098e782a95eed3f1)
}

var fileDescriptor_boxfox_grpc_server_098e782a95eed3f1 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0x34, 0x6d, 0xe9, 0x78, 0xa9, 0x8b, 0x68, 0xac, 0x97, 0x92, 0x53, 0x2e, 0xdd,
	0x80, 0x1e, 0x3d, 0x19, 0x04, 0xf1, 0xe0, 0x65, 0x7d, 0x80, 0x92, 0x6c, 0xc7, 0x35, 0x60, 0x76,
	0xd6, 0x49, 0x0c, 0xe9, 0xab, 0x7b, 0x92, 0x6c, 0x8b, 0x82, 0xbd, 0x2c, 0xfb, 0xff, 0x33, 0x7c,
	0xcc, 0x07, 0x49, 0x45, 0xc3, 0x1b, 0x0d, 0x5b, 0xcb, 0xde, 0x6c, 0x5b, 0xe4, 0x1e, 0x59, 0x79,
	0xa6, 0x8e, 0x64, 0xbc, 0xc3, 0x86, 0x56, 0x0f, 0xb6, 0xee, 0xde, 0xbf, 0x2a, 0x65, 0xa8, 0xc9,
	0xd1, 0xf5, 0xb4, 0xf7, 0x4c, 0xc3, 0x3e, 0x0f, 0x2b, 0x66, 0x63, 0xd1, 0x6d, 0xfa, 0xf2, 0xa3,
	0xde, 0x95, 0x1d, 0xe6, 0x27, 0x9f, 0x03, 0x28, 0x7d, 0x04, 0x78, 0x21, 0x57, 0x77, 0xc4, 0x1a,
	0x3f, 0xe5, 0x0d, 0xc4, 0xae, 0x6c, 0x30, 0x11, 0x6b, 0x91, 0x2d, 0x8a, 0xf9, 0x77, 0x11, 0x73,
	0xb4, 0x14, 0x3a, 0x94, 0xf2, 0x1a, 0x26, 0xa5, 0xc5, 0x24, 0x5a, 0x8b, 0x6c, 0x12, 0x66, 0x69,
	0x94, 0x09, 0x3d, 0x76, 0xe9, 0x3d, 0x9c, 0xfd, 0x52, 0x5a, 0x2f, 0x2f, 0x60, 0x8a, 0xcc, 0x8e,
	0x02, 0x67, 0xaa, 0x0f, 0x41, 0x5e, 0xc2, 0x0c, 0x99, 0x9b, 0xd6, 0x06, 0xc4, 0x42, 0x1f, 0xd3,
	0xed, 0x33, 0x5c, 0x15, 0xc1, 0xf3, 0x89, 0xbd, 0x79, 0x0d, 0x96, 0xe3, 0x5b, 0x1b, 0x94, 0x0a,
	0xe6, 0x47, 0xae, 0x5c, 0xaa, 0x51, 0x59, 0xfd, 0x1d, 0xbb, 0x3a, 0xff, 0xd7, 0xb4, 0xbe, 0x9a,
	0x05, 0xa9, 0xbb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x83, 0x88, 0xf2, 0x39, 0x01, 0x00,
	0x00,
}
